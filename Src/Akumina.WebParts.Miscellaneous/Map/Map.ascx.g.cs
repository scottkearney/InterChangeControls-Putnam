//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akumina.WebParts.Miscellaneous.Map {
    using System.Configuration;
    using System.Text.RegularExpressions;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI.WebControls.WebParts;
    using System.Collections.Generic;
    using System.Web.DynamicData;
    using System.Collections.Specialized;
    using System.Xml.Linq;
    using System.Collections;
    using System.Linq;
    using System.Web.UI;
    using System.Web.Profile;
    using System.Text;
    using System.Web.UI.HtmlControls;
    using System.Web.Caching;
    using System;
    using System.Web.UI.WebControls;
    using System.Web.SessionState;
    using System.ComponentModel.DataAnnotations;
    using System.CodeDom.Compiler;
    
    
    public partial class Map {
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebPartCodeGenerator", "12.0.0.0")]
        public static implicit operator global::System.Web.UI.TemplateControl(Map target) 
        {
            return target == null ? null : target.TemplateControl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__BuildControlTree(global::Akumina.WebParts.Miscellaneous.Map.Map @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script src=\"https://maps.googleapis.com/maps/api/js\"></script>\r\n\r\n<div class=\"" +
                        "interAction\">\r\n<div class=\"ia-control-header\">\r\n<span class=\"ia-control-header-i" +
                        "con fa fa-car\"></span>\r\n<h3 class=\"ia-control-header-heading\">Traffic</h3>\r\n    " +
                        "\r\n</div>\r\n <style>\n      #map {\n        width: 100%;\n        height: 270px;\n    " +
                        "  }\n    </style>\n    \r\n<div class=\"ia-traffic\">\r\n   <div id=\"map\"></div>\n\t<div>\n" +
                        "\t<input type=\"text\" id=\"locationTrafficSearch\" PlaceHolder=\"Enter City, State or" +
                        " Zip\" />\n\t<input type=\"button\" id=\"trafficGoSearch\" value=\"Go\" />\n\t</div>\r\n\r\n </" +
                        "div>\r\n<script>\r\n    \r\n    var browser = {\r\n        isIe: function () {\r\n        " +
                        "    return navigator.appVersion.indexOf(\"MSIE\") != -1;\r\n        },\r\n        navi" +
                        "gator: navigator.appVersion,\r\n        getVersion: function () {\r\n            var" +
                        " version = 999; // we assume a sane browser\r\n            if (navigator.appVersio" +
                        "n.indexOf(\"MSIE\") != -1)\r\n                // bah, IE again, lets downgrade versi" +
                        "on number\r\n                version = parseFloat(navigator.appVersion.split(\"MSIE" +
                        "\")[1]);\r\n            return version;\r\n        }\r\n    };\r\n\r\n    if (browser.isIe(" +
                        ") && browser.getVersion() <= 9) {\r\n\r\n        function CheckIsloadGoogleMap() {\r\n" +
                        "            if($(\'#map\').html() ==\"\"){\r\n                CallInitializeGoogleMaps" +
                        "();\r\n            }\r\n            else{ \r\n                clearInterval(intervalTr" +
                        "affic);\r\n            }\r\n        }\r\n\r\n        var intervalTraffic = setInterval(C" +
                        "heckIsloadGoogleMap, 1000);\r\n    }\r\n\r\n    function initializeGoogleMapControl(lo" +
                        "cation, newCookie) {\r\n\r\n        var googleMapUrlLocation = \"http://maps.googleap" +
                        "is.com/maps/api/geocode/json?address=\" + location;\r\n        if (browser.isIe() &" +
                        "& browser.getVersion() <= 9) {\r\n            // Use Microsoft XDR\r\n            va" +
                        "r xdr = new XDomainRequest();\r\n            xdr.open(\"get\", googleMapUrlLocation)" +
                        ";\r\n            xdr.onload = function () {\r\n                var JSON = $.parseJSO" +
                        "N(xdr.responseText);\r\n                if (JSON == null || typeof (JSON) == \'unde" +
                        "fined\') {\r\n                    JSON = $.parseJSON(data.firstChild.textContent);\r" +
                        "\n                }\r\n                processDataTraffic(JSON, newCookie);\r\n      " +
                        "      };\r\n            xdr.send();\r\n        } else {\r\n            $.getJSON(googl" +
                        "eMapUrlLocation).done(function (data) {\r\n                processDataTraffic(data" +
                        ", newCookie);\r\n            });\r\n        }\r\n    }\n    function processDataTraffic" +
                        "(data, newCookie) {\r\n        try {\r\n\n            var obj = data.results[0][\"geom" +
                        "etry\"][\"location\"];\n            var map = new google.maps.Map(document.getElemen" +
                        "tById(\'map\'), {\r\n                zoom: 13,\n                center: obj\r\n        " +
                        "    });\n            var trafficLayer = new google.maps.TrafficLayer();\n         " +
                        "   trafficLayer.setMap(map);\r\n            if (newCookie) {\r\n                crea" +
                        "teCookie(\"TrafficLocation_InterActionGoogle\", $(\'#locationTrafficSearch\').val()," +
                        " \"\");\r\n            }\r\n        }\r\n        catch (exception) {\r\n\r\n        }\n    }\n" +
                        "    \n    function CallInitializeGoogleMaps() {\r\n        var cookieLocation = rea" +
                        "dCookie(\"TrafficLocation_InterActionGoogle\") == null ? \"Boston\" : readCookie(\"Tr" +
                        "afficLocation_InterActionGoogle\");\r\n        initializeGoogleMapControl(cookieLoc" +
                        "ation);\n    }\n\n    $(document).ready(function () {\r\n        CallInitializeGoogle" +
                        "Maps();\r\n        $(\'#trafficGoSearch\').bind(\'click\', function () {\r\n            " +
                        "initializeGoogleMapControl($(\'#locationTrafficSearch\').val(), true);\r\n          " +
                        "  \r\n        });\r\n    });\n\r\n\r\n    function createCookie(name, value, days) {\r\n   " +
                        "     var expires;\r\n\r\n        if (days) {\r\n            var date = new Date();\r\n  " +
                        "          date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n        " +
                        "    expires = \"; expires=\" + date.toGMTString();\r\n        } else {\r\n            " +
                        "expires = \"\";\r\n        }\r\n        document.cookie = encodeURIComponent(name) + \"" +
                        "=\" + encodeURIComponent(value) + expires + \"; path=/\";\r\n    }\r\n\r\n    function re" +
                        "adCookie(name) {\r\n        var nameEQ = encodeURIComponent(name) + \"=\";\r\n        " +
                        "var ca = document.cookie.split(\';\');\r\n        for (var i = 0; i < ca.length; i++" +
                        ") {\r\n            var c = ca[i];\r\n            while (c.charAt(0) === \' \') c = c.s" +
                        "ubstring(1, c.length);\r\n            if (c.indexOf(nameEQ) === 0) return decodeUR" +
                        "IComponent(c.substring(nameEQ.length, c.length));\r\n        }\r\n        return nul" +
                        "l;\r\n    }\r\n\r\n</script>"));
        }
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void InitializeControl() {
            this.@__BuildControlTree(this);
            this.Load += new global::System.EventHandler(this.Page_Load);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected virtual object Eval(string expression) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected virtual string Eval(string expression, string format) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression, format);
        }
    }
}
